library = "Dionysus"
FltRips = ripsFiltration(X = X, maxdimension = maxdimension, maxscale = maxscale,
dist = dist, library = library)
DiagFltRips = filtrationDiag(filtration = FltRips, maxdimension = maxdimension, library = library, location = TRUE)
# plot(DiagFltRips[["diagram"]])
plot(X)
# Find optimal step in filtration
t = 1
values = FltRips[["values"]] <= t
# Plot 1-cells
cmplx = FltRips[["cmplx"]][values]
oneCells = cmplx[unlist(lapply(cmplx, function(x) length(x) == 2))]
for (i in seq_len(length(oneCells))){
lines(X[oneCells[[i]],])
}
# Plot 2-cells
# Plot cycle
index = 33
for (i in seq_len(dim(DiagFltRips[["cycleLocation"]][[index]])[1])){
# print(X[DiagFltRips[["cycleLocation"]][[index]][i,],])
lines(
X[DiagFltRips[["cycleLocation"]][[index]][i,],],
col="red"
)
}
n = 30
X = cbind(cos(2*pi*seq_len(n)/n), sin(2*pi*seq_len(n)/n))
# Y = cbind(1.1*cos(2*pi*seq_len(n)/n), 1.1*sin(2*pi*seq_len(n)/n))
# X = rbind(X, Y)
X = rbind(X, rbind(c(0.2, 0.2), c(0, 0), c(-0.1, 0.1), c(0.2, -0.15)))
maxdimension = 1
maxscale = 20
dist = "euclidean"
library = "Dionysus"
FltRips = ripsFiltration(X = X, maxdimension = maxdimension, maxscale = maxscale,
dist = dist, library = library)
DiagFltRips = filtrationDiag(filtration = FltRips, maxdimension = maxdimension, library = library, location = TRUE)
# plot(DiagFltRips[["diagram"]])
plot(X)
# Find optimal step in filtration
t = 0.75
values = FltRips[["values"]] <= t
# Plot 1-cells
cmplx = FltRips[["cmplx"]][values]
oneCells = cmplx[unlist(lapply(cmplx, function(x) length(x) == 2))]
twoCells = cmplx[unlist(lapply(cmplx, function(x) length(x) == 3))]
for (i in seq_len(length(oneCells))){
lines(X[oneCells[[i]],])
}
# Plot 2-cells
# Plot cycle
index = 36
for (i in seq_len(dim(DiagFltRips[["cycleLocation"]][[index]])[1])){
# print(X[DiagFltRips[["cycleLocation"]][[index]][i,],])
lines(
X[DiagFltRips[["cycleLocation"]][[index]][i,],],
col="red"
)
}
n = 30
X = cbind(cos(2*pi*seq_len(n)/n), sin(2*pi*seq_len(n)/n))
# Y = cbind(1.1*cos(2*pi*seq_len(n)/n), 1.1*sin(2*pi*seq_len(n)/n))
# X = rbind(X, Y)
X = rbind(X, rbind(c(0.2, 0.2), c(0, 0), c(-0.1, 0.1), c(0.2, -0.15)))
maxdimension = 1
maxscale = 20
dist = "euclidean"
library = "Dionysus"
FltRips = ripsFiltration(X = X, maxdimension = maxdimension, maxscale = maxscale,
dist = dist, library = library)
DiagFltRips = filtrationDiag(filtration = FltRips, maxdimension = maxdimension, library = library, location = TRUE)
# plot(DiagFltRips[["diagram"]])
plot(X)
# Find optimal step in filtration
t = 0.82
values = FltRips[["values"]] <= t
# Plot 1-cells
cmplx = FltRips[["cmplx"]][values]
oneCells = cmplx[unlist(lapply(cmplx, function(x) length(x) == 2))]
twoCells = cmplx[unlist(lapply(cmplx, function(x) length(x) == 3))]
for (i in seq_len(length(oneCells))){
lines(X[oneCells[[i]],])
}
# Plot 2-cells
# Plot cycle
index = 36
for (i in seq_len(dim(DiagFltRips[["cycleLocation"]][[index]])[1])){
# print(X[DiagFltRips[["cycleLocation"]][[index]][i,],])
lines(
X[DiagFltRips[["cycleLocation"]][[index]][i,],],
col="red"
)
}
library(TDA)
library(rgl)
library(plot3D)
library(igraph)
library(rlist)
library(TDA)
source('helperFunctions.R')
# complex = list(1,2,3,4,5,6,7,8, c(1,2), c(1,3), c(2,3), c(3,4), c(4,5), c(5,6)
#                ,c(5,7),c(6,8), c(7,8))
# values = c(0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7)
# inf = 10
# distance = matrix(c(
#   0, 1, 1, 2, 3, 4, 4, 5,
#   1, 0, 1, 2, 3, 4, 4, 5,
#   1, 1, 0, 1, 2, 3, 3, 4,
#   2, 2, 1, 0, 1, 2, 2, 3,
#   3, 3, 2, 1, 0, 1, 1, 2,
#   4, 4, 3, 2, 1, 0, 2, 1,
#   4, 4, 3, 2, 1, 2, 0, 1,
#   5, 5, 4, 3, 2, 1, 1, 0
# ),
# nrow = 8)
.optimalGenerators = function(complex, values, distance, inf){
# Perform initial homology calculation to determine beta_1
filtration = list(complex, values, TRUE)
names(filtration) = c("cmplx", "values", "increasing")
diagram = filtrationDiag(filtration = filtration, maxdimension = 1,
library = "Dionysus")
betti = sum(diagram[[1]][,1] == 1 & diagram[[1]][,3] == Inf)
# Find optimal generators
generators = list()
minSize = 1
seals = list(list(),c())
for (i in seq(betti)) {
# Debugging
# print("OptimalGenerator:")
# print(i)
# Calculate the smallest cycle.
smallest = .measureSmallest(complex, distance, minSize, seals)
minSize = smallest[2]
generators = append(generators, smallest[1])
print(smallest)
# Seal the cycle by attaching all vertices in it, modifying the complex
cover = .cover(unique(unlist(smallest[1])), inf)
seals[[1]] = append(seals[[1]], cover[[1]])
seals[[2]] = append(seals[[2]], cover[[2]])
}
return(generators)
}
R = 5
u = runif(30, min=0, max= 2*pi)
v = runif(30, min=-1, max=1)
x <- (R + v/2 * cos(u /2)) * cos(u)
y <- (R + v/2 * cos(u /2)) * sin(u)
z <- v * sin(u / 2)
data = matrix(c(x, y, z), ncol=3)
open3d()
points3d(data, color="black", size=6)
maxdimension = 1
maxscale = 20
dist = "euclidean"
library = "Dionysus"
FltRips = ripsFiltration(X = data, maxdimension = maxdimension, maxscale = maxscale,
dist = dist, library = library)
DiagFltRips = filtrationDiag(filtration = FltRips, maxdimension = maxdimension,
library = library, location = TRUE)
plot(DiagFltRips[["diagram"]])
DiagFltRips[["diagram"]]
path = DiagFltRips[["cycleLocation"]][[31]]
for (i in seq(length(path[,1]))){
x = c(data[path[i,1],][1], data[path[i,2],][1])
y = c(data[path[i,1],][2], data[path[i,2],][2])
z = c(data[path[i,1],][3], data[path[i,2],][3])
lines3d(x, y, z, color="red", size=10, lwd=5)
}
time = 4.88909
bools = FltRips[["values"]] <= 4.88909
cmplx = FltRips[["cmplx"]][bools]
values = FltRips[["values"]][bools]
inf = max(values)+0.001
# Compute discrete distance matrix for 0-cells at t=2
eucDist = as.matrix(dist(data))
eucDist[eucDist > time] = 0
# distance = floyd(eucDist)
graph = graph_from_adjacency_matrix(eucDist, mode="undirected", weighted=TRUE)
distance = shortest.paths(graph)
# optimal generators
gens = .optimalGenerators(cmplx, values, distance, inf)
gen = gens[[1]]
library(rlist)
library(TDA)
# complex = list(1,2,3,4,5,6,7,8, c(1,2), c(1,3), c(2,3), c(3,4), c(4,5), c(5,6),
#                c(5,7),c(6,8), c(7,8))
# values = c(0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7)
# distance = matrix(c(
#   0, 1, 1, 2, 3, 4, 4, 5,
#   1, 0, 1, 2, 3, 4, 4, 5,
#   1, 1, 0, 1, 2, 3, 3, 4,
#   2, 2, 1, 0, 1, 2, 2, 3,
#   3, 3, 2, 1, 0, 1, 1, 2,
#   4, 4, 3, 2, 1, 0, 2, 1,
#   4, 4, 3, 2, 1, 2, 0, 1,
#   5, 5, 4, 3, 2, 1, 1, 0
# ),
# nrow = 8)
# inf = 10
# Returns a list that, when concatenated, will connect all vertices at the inf
# filtration step.
#Requirements:
#inf > max(values)
.cover = function(complex, inf){
vertices = list.filter(complex, length(.) == 1)
edgesVec = combn(vertices, 2)
edges = list()
i = 1
while(i <= length(edgesVec)/2){
edges[[i]] = c(edgesVec[[1,i]], edgesVec[[2,i]])
i = i + 1
}
facesVec = combn(vertices, 3)
faces = list()
i = 1
while(i <= length(facesVec)/3){
faces[[i]] = c(facesVec[[1,i]], facesVec[[2,i]], facesVec[[3,i]])
i = i + 1
}
simplexCover = c(edges, faces)
coverValues = rep(inf, times = length(simplexCover))
return (list(simplexCover, coverValues))
}
# Returns the radius of the smallest geodesic ball containing a cycle, centered at a vertex v.
.geodesicBall = function(v, complex, distMatrix, cover){
# For each complex, assigns a filtration value equal to max_{x in complex} d(v,x)
values = double(length(complex))
for (i in seq_along(complex)){
values[i] = max(distMatrix[v, unlist(complex[i])])
}
# Seals any found cycles
complex = c(complex, cover[[1]])
values = c(values, cover[[2]])
# Adds an extra cover at the last step of filtration
inf = max(values) + 1
cover = .cover(complex, inf)
complex = c(complex, cover[[1]])
values = c(values, cover[[2]])
# Computes persistent homology using this filtration
filtration = list(complex, values, TRUE)
names(filtration) = c("cmplx", "values", "increasing")
diagram = filtrationDiag(filtration= filtration, maxdimension = 1,
library= "Dionysus", location= TRUE)
# Find the youngest cycle that dies at inf
# i = match(1, diagram[["diagram"]][,"dimension"])
for(i in seq_along(diagram[["diagram"]][,1])){
# Debugging
# print("geodesicBall:")
# print(i)
if (diagram[[1]][i,1] == 1 && diagram[[1]][i,3] == inf){
index = i
break
}
}
# Debugging
# print(seq_along(diagram[["diagram"]][,1]))
# print(diagram[["diagram"]])
# print(complex)
# print(values)
radius = diagram[["diagram"]][index,2]
cycle = diagram[["cycleLocation"]][index]
# Debugging
# print(diagram)
#print(c(cycle, radius))
return(c(cycle, radius))
}
# Returns the smallest nontrivial homology class, along with its size
.measureSmallest = function(complex, distMatrix, minSize=1, cover){
vertices = unlist(list.filter(complex, length(.) == 1))
currentMin = Inf
for (v in vertices) {
# Debugging
# print("measureSmallest:")
# print(v)
ball = .geodesicBall(v, complex, distMatrix, cover)
size = ball[[2]]
if(size < currentMin){
currentMin = size
currentCycle = ball[1]
}
if(currentMin == minSize){
break
}
}
return(c(currentCycle, currentMin))
}
### Testing .cover
# cover = .cover(complex, inf)
# complex = c(complex, cover[[1]])
# values = c(values, cover[[2]])
# filtration = list(complex, values, TRUE)
# names(filtration) = c("cmplx", "values", "increasing")
# diagram = filtrationDiag(filtration = filtration, maxdimension = 1,
#                          library = "Dionysus", location = TRUE)
# plot(diagram[["diagram"]])
# diagram
### Testing .geodesicBall
# .geodesicBall(3, complex, distance)
# optimal generators
gens = .optimalGenerators(cmplx, values, distance, inf)
gen = gens[[1]]
for (i in seq(length(gen[,1]))){
from = gen[i,1]
to = gen[i,2]
path = shortest_paths(graph, from, to)
path = unlist(path, use.names = FALSE)
froms = head(path, length(path) - 1)
tos = tail(path, length(path) - 1)
for (j in seq(length(froms))){
x = c(data[froms[j],1], data[tos[j],1])
y = c(data[froms[j],2], data[tos[j],2])
z = c(data[froms[j],3], data[tos[j],3])
lines3d(x,y,z, color="green", size=10, lwd=5)
}
}
R = 5
u = runif(100, min=0, max= 2*pi)
v = runif(100, min=-1, max=1)
x <- (R + v/2 * cos(u /2)) * cos(u)
y <- (R + v/2 * cos(u /2)) * sin(u)
z <- v * sin(u / 2)
data = matrix(c(x, y, z), ncol=3)
maxdimension = 1
maxscale = 20
dist = "euclidean"
library = "Dionysus"
open3d()
points3d(data, color="black", size=6)
FltRips = ripsFiltration(X = data, maxdimension = maxdimension, maxscale = maxscale,
dist = dist, library = library)
DiagFltRips = filtrationDiag(filtration = FltRips, maxdimension = maxdimension,
library = library, location = TRUE)
plot(DiagFltRips[["diagram"]])
DiagFltRips[["diagram"]]
path = DiagFltRips[["cycleLocation"]][[108]]
for (i in seq(length(path[,1]))){
x = c(data[path[i,1],][1], data[path[i,2],][1])
y = c(data[path[i,1],][2], data[path[i,2],][2])
z = c(data[path[i,1],][3], data[path[i,2],][3])
lines3d(x, y, z, color="red", size=10, lwd=5)
}
open3d()
points3d(data, color="black", size=6)
for (i in seq(length(path[,1]))){
x = c(data[path[i,1],][1], data[path[i,2],][1])
y = c(data[path[i,1],][2], data[path[i,2],][2])
z = c(data[path[i,1],][3], data[path[i,2],][3])
lines3d(x, y, z, color="red", size=10, lwd=5)
}
# Find complex and filtration for t=2
time = 2
bools = FltRips[["values"]] <= 2
cmplx = FltRips[["cmplx"]][bools]
values = FltRips[["values"]][bools]
inf = max(values)+0.001
# Compute discrete distance matrix for 0-cells at t=2
eucDist = as.matrix(dist(data))
eucDist[eucDist > time] = 0
# distance = floyd(eucDist)
graph = graph_from_adjacency_matrix(eucDist, mode="undirected", weighted=TRUE)
distance = shortest.paths(graph)
# optimal generators
gens = .optimalGenerators(cmplx, values, distance, inf)
gen = gens[[1]]
for (i in seq(length(gen[,1]))){
from = gen[i,1]
to = gen[i,2]
path = shortest_paths(graph, from, to)
path = unlist(path, use.names = FALSE)
froms = head(path, length(path) - 1)
tos = tail(path, length(path) - 1)
for (j in seq(length(froms))){
x = c(data[froms[j],1], data[tos[j],1])
y = c(data[froms[j],2], data[tos[j],2])
z = c(data[froms[j],3], data[tos[j],3])
lines3d(x,y,z, color="green", size=10, lwd=5)
}
}
R = 5
u = runif(200, min=0, max= 2*pi)
v = runif(200, min=-1, max=1)
x <- (R + v/2 * cos(u /2)) * cos(u)
y <- (R + v/2 * cos(u /2)) * sin(u)
z <- v * sin(u / 2)
data = matrix(c(x, y, z), ncol=3)
maxdimension = 1
maxscale = 20
dist = "euclidean"
library = "Dionysus"
FltRips = ripsFiltration(X = data, maxdimension = maxdimension, maxscale = maxscale,
dist = dist, library = library)
DiagFltRips = filtrationDiag(filtration = FltRips, maxdimension = maxdimension,
library = library, location = TRUE)
plot(DiagFltRips[["diagram"]])
DiagFltRips[["diagram"]]
path = DiagFltRips[["cycleLocation"]][[228]]
open3d()
points3d(data, color="black", size=6)
points3d(data, color="black", size=2)
for (i in seq(length(path[,1]))){
x = c(data[path[i,1],][1], data[path[i,2],][1])
y = c(data[path[i,1],][2], data[path[i,2],][2])
z = c(data[path[i,1],][3], data[path[i,2],][3])
lines3d(x, y, z, color="red", size=10, lwd=5)
}
# Compute optimal generators
# Find complex and filtration for t=2
time = 2
bools = FltRips[["values"]] <= 2
cmplx = FltRips[["cmplx"]][bools]
values = FltRips[["values"]][bools]
inf = max(values)+0.001
# Compute discrete distance matrix for 0-cells at t=2
eucDist = as.matrix(dist(data))
eucDist[eucDist > time] = 0
# distance = floyd(eucDist)
graph = graph_from_adjacency_matrix(eucDist, mode="undirected", weighted=TRUE)
distance = shortest.paths(graph)
# optimal generators
gens = .optimalGenerators(cmplx, values, distance, inf)
gen = gens[[1]]
for (i in seq(length(gen[,1]))){
from = gen[i,1]
to = gen[i,2]
path = shortest_paths(graph, from, to)
path = unlist(path, use.names = FALSE)
froms = head(path, length(path) - 1)
tos = tail(path, length(path) - 1)
for (j in seq(length(froms))){
x = c(data[froms[j],1], data[tos[j],1])
y = c(data[froms[j],2], data[tos[j],2])
z = c(data[froms[j],3], data[tos[j],3])
lines3d(x,y,z, color="green", size=10, lwd=5)
}
}
setwd("D:/Google Drive/Uni/5th Year/Thesis/R code/optimal-generators")
data = read.table(file="ratios_forclusterayasdi.tsv", sep='\t', header=TRUE)
View(data)
rownames(data) = data[,1]
data[,1] = NULL
data[,1] = NULL
maxdimension = 2
maxscale = 20
dist = "euclidean"
library = "Dionysus"
FltRips = ripsFiltration(X = data, maxdimension = maxdimension, maxscale = maxscale,
dist = dist, library = library)
DiagFltRips = filtrationDiag(filtration = FltRips, maxdimension = maxdimension,
library = library, location = TRUE)
plot(DiagFltRips[["diagram"]])
DiagFltRips[["diagram"]]
DiagFltRips[["cycleLocation"]][305]
DiagFltRips[["cycleLocation"]]
DiagFltRips[["diagram"]]
DiagFltRips[["cycleLocation"]][205]
data[names]
names(data)
data[1,]
data[,1]
rownames(data)
cycles = DiagFltRips[["cycleLocation"]][205]
cycles
rownames(data)[cycles[,1]]
cycles[,1]
cycles
cycles,1
cycles[,1]
dim(cycles)
cycles[0]
unlist(cycles)
nodupes(unlist(cycles))
distinct(unlist(cycles))
unique(unlist(cycles))
unique(unlist(cycles))[2]
cycles = unique(unlist(cycles))
cycles
rownames(data)
rownames(data)[cycles]
DiagFltRips[["diagram"]]
cycles = DiagFltRips[["cycleLocation"]][220]
cycles = unique(unlist(cycles))
genes2 = rownames(data)[cycles]
genes2
genes1
cycles = DiagFltRips[["cycleLocation"]][205]
cycles = unique(unlist(cycles))
genes1 = rownames(data)[cycles]
genes1
ASD = read.csv('DM.counts.csv')
maxdimension = 2
maxscale = 20
dist = "euclidean"
library = "Dionysus"
rownames(ASD) = ASD[,1]
ASD[,1] = NULL #NOTE! Do this IF AND ONLY IF running the whole script
# tASD = scale(transpose(ASD))
dim(ASD)
FltRips = ripsFiltration(X = ASD, maxdimension = maxdimension, maxscale = maxscale,
dist = dist, library = library)
DiagFltRips = filtrationDiag(filtration = FltRips, maxdimension = maxdimension,
library = library, location = TRUE)
plot(DiagFltRips[["diagram"]])
DiagFltRips[["diagram"]]
DiagFltRips[["diagram"]][13137]
DiagFltRips[["cycleLocation"]][13137]
rownames(ASD)
DiagFltRips[["cycleLocation"]][13137]
rownames(ASD)[782]
rownames(ASD)[1006]
rownames(ASD)[2354]
rownames(ASD)[5057]
dim(data)
